C  CLOSED SHELL ENERGIES

      SUBROUTINE SCFCL
      IMPLICIT REAL*8(A-H,O-Z)
      include 'dimmm'

C     ----- CLOSED SHELL HF-SCF CALCULATION -----

      LOGICAL NEARLY,CONVGD,LSTOP,HSPA,SSPA,DSPA,VSPA
      LOGICAL LSWOP
      LOGICAL FIXED,LEX,LDAM12,LDAM13,LDAM23,LDIIS
      COMMON/SCFBLK/EN,ETOT,EHF,SH1(2),SH2(2),GAP1(2),GAP2(2),
     1              D12,D13,D23,CANA,CANB,CANC,FIXED,LEX,
     2              LDAM12,LDAM13,LDAM23,LDIIS,
     3              NCYC,ISCHM,LOCK,MAXIT,NCONV,LOKCYC
      LOGICAL  LADAPT,LSKIP
      CHARACTER*8 TITLE,SCFTYP,RUNTYP,GUESS,CONF
      COMMON/OPTNSB/TITLE(10),SCFTYP,RUNTYP,GUESS,CONF
      COMMON/OPTNS/TIMLIM,VIBSIZ,NOPT,NVIB,IREST2,IREST3,
     &            LADAPT,LSKIP,NPRINT,ITOL,ICUT,NORMF,NORMP,
     &            IREST,NREC,INTLOC,IST,JST,KST,LST,IR,IW,
     &            IBLKD,IFILD,IBLKS,IFILS,IBLKM,IFILM,MBLKM,
     &            NOTAPE(3),IBLK(3),LBLK(3),ILOW,NCOORB,NSA,
     &            MINVEC,DIISE,DIISD,MINULL,
     &            ICONV,NRUNS,NMUL(2),IPOSM,LDA(24),ISEX(24),
     &            TTOT1
      LOGICAL REVISE
      COMMON/SECTOR/NUM3,IBLK3,REVISE,IODA(24),ICLASS(24),
     &              ILEN(24),MAXB,KBLKLA
      COMMON/TIMEX/TSTART,TI,TX,TIM,TTGO,TIMMAX,TTOT
      INTEGER P1,P2,P3
      CHARACTER*8 PARNAM,ATNAM,ANAM,BFLAB
      COMMON/INFOA/NAT,ICH,MUL,NUM,NX,NE,NA,NB,ZAN(NATM1),C(3,NATM1),
     &             NVAR,NPAR,NVAL,NUQ,
     &             CFR,CFA,KONTYP(NATM1),P1(NATM1),P2(NATM1),P3(NATM1)
     &             ,KR(NATM1),KA(NATM1),KB(NATM1),PARVAL(NATM13)
     &             ,ZIN(NATM1),X(NATM13)
      COMMON/INFOB/ANAM(NATM1),BFLAB(NBF1),PARNAM(NATM13),ATNAM(NATM1)
      COMMON/TEMP2/IOSF(50)
      COMMON/BIG/QQQ(MDM1),QXTRA
      COMMON/BIGG/QQ(MDM1),QQXTRA,Q(NBF1M+NBF1)
      COMMON/MAPPER/IA(NBF1+1)
      PARAMETER (ONE=1.0D0,ZERO=0.0D0,TWO=2.0D0,TEN=1.0D1,
     &           UAEV=27.211611D0)

10    FORMAT(/,' ----- NUCLEAR ENERGY ----- = ',F20.12)
20    FORMAT(/,1X,'CONVERGENCE DATA'//
     1 ' MAXIMUM NUMBER OF ITERATIONS = ',I6,/,
     2 ' CONVERGENCE CRITERION        = 1.0D-',I2,//,
     4 '  CYC   TOTAL        ELECTRONIC        DEL(E)    DEL(D) ',
     5 '  DEL(T)     RUN   SHIF',/
     6 '        ENERGY',T24,'ENERGY',T69,'TIME'/)
30    FORMAT(10X,11(1H-),/,10X,'FOCK MATRIX',/,10X,11(1H-))
40    FORMAT(/,10X,20(1H-),/,10X,'SKELETON FOCK MATRIX',/,
     1 10X,20(1H-))
50    FORMAT(/,10X,23(1H-),/,10X,'SYMMETRIZED FOCK MATRIX',/,
     1 10X,23(1H-))
60    FORMAT(/,10X,11(1H-),/,10X,'EIGENVALUES',/,10X,11(1H-)/
     &T32,'au',20X,'ev'/)
70    FORMAT(T18,I5,F20.12,F20.9)
80    FORMAT(/,10X,12(1H-),/,10X,'EIGENVECTORS',/,10X,12(1H-))
90    FORMAT(/,10X,14(1H-),/,10X,'DENSITY MATRIX',/,10X,14(1H-))
100   FORMAT(I4,F12.5,2F15.7,F10.7,  F8.2,F10.2,F5.2)
110   FORMAT(/10X,17(1H-),/,10X,'DENSITY CONVERGED',/,10X,17(1H-))
130   FORMAT(/' ..... SCF HAS NOT CONVERGED ...',
     1 ' ... JOB TO BE RESTARTED ....')
140   FORMAT(/,10X,30(1H-),/,10X,'EXCESSIVE NUMBER OF ITERATIONS',
     1 /,10X,30(1H-))
150   FORMAT(5F15.7)
160   FORMAT(//,10X,19(1H-),/,10X,'RHF SCF CALCULATION',/,
     1 10X,19(1H-))
170   FORMAT(//,10X,'FINAL VALUES OF TOTAL ENERGY AND ELECTRONIC'
     1 ,' ENERGY ARE '/,25X,F16.9,' AND  ',F16.9)

      ISECS=0
      ISECH=0
      ISECD=0
      ISECV=0
      ISEC4=0
      ISC24=0

      CALL TRMAT
      MAXQ2 = (NBF1M+NBF1) - (NX+1)
      write(10 ,160)
      WRITE(IW,160)

C     ----- INITIALIZE VARIABLES -----

      DIFF0=ZERO
      DIFF=ZERO
      NDIM=NUM
      I1=1+NX
      I2=I1+NUM
      I3=I2+NX
      I4=I3+NX
      J1=1+NUM*NUM
      I5=I1+NX
      I6=I5+J1-1
      I7=I5+NX
      WRITE(IW,123) MAXDIM,I5
      write(10,123) MAXDIM,I5
123   FORMAT(//' SCF : the available core is',I8,' words for the maximum
     & number of terms in'/
     &         '       a matrix; used',I8,' of them.')
      IF(I5.GT.MAXDIM) CALL HONDER(24,'SCFCL')
      DSPA=.FALSE.
      VSPA=.FALSE.
      HSPA=.FALSE.
      SSPA=.FALSE.
*     IF (I3.LE.MAXQ2) DSPA=.TRUE.
      IF (I2.LE.MAXQ2) DSPA = .TRUE.
*     IF (I6.LE.MAXDIM) VSPA=.TRUE.
      IF (I5.LE.(MDM1-(NUM*NUM))) VSPA = .TRUE.
*     IF(I4.LE.MAXQ2)HSPA=.TRUE.
      IF (I3.LE.MAXQ2) HSPA = .TRUE.
*     IF(I7.LE.MAXDIM)SSPA=.TRUE.
      IF(I5.LE.(MDM1-NX)) SSPA = .TRUE.
      ITYPE=1
      PENAL=ZERO
      DAMP=ONE
      EHF=ZERO
      EDIFF=ZERO
      DELDIF=ZERO
      EHFM1=ZERO
      EHFM2=ZERO
      EHF0=ZERO
      ACURCY=TEN**(-NCONV)
      FACUR=ACURCY*ACURCY
      IF(FACUR.LT.1.0D-16)FACUR=1.0D-16
      ITER=0
      ICA=0
      NEARLY=.FALSE.
      CONVGD=.FALSE.
      LSTOP=.FALSE.
      CALL SECGET(ISEX(5),5,ISECS)
      CALL SECGET(ISEX(6),6,ISECH)
      CALL SECGET(ISEX(7),7,ISECD)
      CALL SECGET(ISEX(8),8,ISECV)
      CALL SECGET(ISEX(4),4,ISEC4)
      CALL SECGET(ISEX(24),24,ISC24)
      LOK=LOKCYC
      DO 180 I=1,NCOORB
        Q(I1+I-1)=ZERO
180     IF(I.LE.NA)Q(I1+I-1)=TWO

      CALL TIMIT(3)
      TIM2=TIM
*      TIM0=TIM

C     ----- NUCLEAR ENERGY

      EN=ENUC(NAT,ZAN,C)
      WRITE(IW,10) EN
      write(10,10) EN
      IF(.NOT.FIXED) WRITE(IW,190) GAP1(1),NCYC,GAP2(1)
190   FORMAT(//5X,'VARIABLE LEVEL SHIFTERS USED'
     1//5X,'MINIMUM OCC.-VIRT. SEPARATION',F6.2,' UNTIL CYCLE',
     2I5,' THEN',F6.2)
      IF(FIXED)WRITE(IW,200) SH1(1),NCYC,SH2(1)
200   FORMAT(//5X,'LEVEL SHIFTER',F7.2,' UNTIL CYCLE',I5,
     1'  THEN',F7.2)
      IF(LDAM13)WRITE(IW,25) D13
25    FORMAT(//5X,'DAMP FACTOR, D13 =',F6.2)
      IF(LEX)WRITE(IW,35)
35    FORMAT(//5X,'EXTRAPOLATION USED')
      IF(.NOT.LEX)WRITE(IW,45)
45    FORMAT(//5X,'EXTRAPOLATION NOT USED')
      IF(LOCK.NE.0)WRITE(IW,210) LOKCYC
210   FORMAT(//5X,'LOCK OPTION IN FORCE FROM CYCLE ',I6)
      write(10 ,20) MAXIT,NCONV
      WRITE(IW,20) MAXIT,NCONV

      CALL READQ(Q(1),NX,ISECH,IFILD)
      IF(HSPA)CALL FMOVE(Q(1),Q(I3),NX)
      IF(SSPA)CALL READQ(QQQ(I5),NX,ISECS,IFILD)

      IF(.NOT.LEX)GOTO 215
      CALL WRT3(Q(1),NX,IOSF(2),IFILS)
      CALL WRT3S(Q(1),NX,IFILS)
      CALL WRT3S(Q(1),NX,IFILS)

C     READ INITIAL DENSITY MATRIX

215   CALL READQ(Q(1),NX,ISECD,IFILD)
      IF(VSPA)CALL READQ(QQ(I5),NUM*NCOORB,ISECV,IFILD)

C     ----- START SCF PROCEDURE -----

220   CALL SEARCH(IBLKM,IFILM)

C     ----- CONSTRUCT A SKELETON FOCK MATRIX -----

      CALL HSTAR(Q(1),QQ(1),IA,NX,IFILM)
      IF(NPRINT.eq.5) then
        WRITE(IW,40)
        CALL FOUT(QQ(1),NUM,IW)
      endif

C     ----- SYMMETRIZE SKELETON FOCK MATRIX -----

      IF(.NOT.LADAPT) CALL SYMH(QQ(1),QQ(I1),IA)
      IF(NPRINT.EQ.5) then
        WRITE(IW,50)
        CALL FOUT(QQ(1),NUM,IW)
      endif

C     ----- READ IN CORE HAMILTONIAN MATRIX
C           AND CALCULATE HF ENERGY -----

      ITER=ITER+1
      EHFM2=EHFM1
      EHFM1=EHF0
      EHF0=EHF
      IF(HSPA)CALL FMOVE(Q(I3),QQ(I1),NX)
      IF(.NOT.HSPA)CALL READQ(QQ(I1),NX,ISECH,IFILD)
      DO 250 I=1,NX
        QQ(I)=QQ(I)+QQ(NX+I)
250     QQ(NX+I)=QQ(NX+I)+QQ(I)
      EHF=TRACEP(Q(1),QQ(I1),NUM)/TWO

C     CURRENT DENSITY MATRIX IN Q(1), FOCK MATRIX QQ(1)
C     STORE CURRENT DENSITY MATRIX AT Q(I2) , IF SPACE

      IF(DSPA)CALL FMOVE(Q(1),Q(I2),NX)
      LSWOP=ITER.GT.3.AND.ITER.LE.LOK

C     EXTRAPOLATE FOCK MATRICES

      IF(LEX)CALL EXTRAP(QQ(I1),QQQ(1),QQQ(I1),QQ(1)
     &                   ,ICA,IW,IFILS,IOSF,0,LDIIS)

      IF(NPRINT.EQ.5) then
        WRITE(IW,30)
        CALL FOUT(QQ(1),NUM,IW)
      endif

C     ----- READ IN FOCK TRANSFORMATION MATRIX -----

      IF (.NOT.VSPA) then
        CALL READQ(QQQ(1),NUM*NCOORB,ISECV,IFILD)

C     COPY FROM QQ(I5) , IF SPACE ALLOWS

      else
        CALL FMOVE(QQ(I5),QQQ(1),NCOORB*NUM)
      endif

C     TRANSFORM

      CALL FOCKTR(Q(1),QQ(1),QQQ(1),QQQ(J1),IA,NCOORB,NUM,NDIM)

C     ADD LEVEL SHIFTERS

      IF(ITER.GE.4)CALL PNLTY(PENAL,DAMP,EHF,EHF0,EHFM1
     &                              ,EHFM2,LSWOP,DELDIF,ICA)
      CALL LEVEL(SHIF,Q(1),SH1(1),SH2(1),GAP1(1),GAP2(1)
     &            ,NCYC,ITER,NA,NCOORB,FIXED)
      SHIF=SHIF+PENAL
      IF(LDAM13)DAMP=D13
      CALL LSHIFT(Q(1),NCOORB,NA,IA,SHIF,DAMP)

C     ----- DIAGONALIZE NEW HAMILTONIAN MATRIX -----

      THRESH=DIFF*DIFF
      IF(THRESH.GT.1.0D-8)THRESH=1.0D-8
      IF(THRESH.LT.FACUR)THRESH=FACUR
*      call hqrii1
*     &  (NCOORB,1,NCOORB,-1,Q(1),QQ(J1),NDIM,QQ(1),.TRUE.,qqq(1))
      CALL LIGEN(Q(1),QQ(1),QQ(J1),IA,NCOORB,NDIM,ITYPE,THRESH)

C     LOCK OPTION

      IF(ITER.GT.LOK)CALL LOCKER(QQ(J1),QQ(1),NCOORB,NCOORB,
     &NDIM)

C     REMOVE LEVEL SHIFTERS

      CALL USHIFT(QQ(J1),NA,NCOORB,SHIF)

*C     ----- READ IN, AGAIN, FOCK TRANSFORMATION MATRIX -----

*      IF(.NOT.VSPA) then
*        CALL READQ(QQQ(1),NUM*NCOORB,ISECV,IFILD)

*C     COPY FROM QQ(I5) , IF SPACE ALLOWS

*      else
*        CALL FMOVE(QQ(I5),QQQ(1),NCOORB*NUM)
*      endif

C     TRANSFORM EIGENVECTORS BACK TO A.O. BASIS

      CALL BACKTR(QQ(1),QQQ(1),QQQ(J1),NCOORB,NUM,NDIM)

C     ORDER EIGENVECTORS IF DESIRED

      IF(LSWOP)CALL ORDER(QQ(1),QQ(J1),NUM,
     1NCOORB,NDIM,NA,ICA)

C    ORTHOGONALISE M.O.'S EVERY ISCHM CYCLES

      IF((ITER/ISCHM)*ISCHM.NE.ITER)GOTO 111
      IF(SSPA)CALL FMOVE(QQQ(I5),Q(1),NX)
      IF(.NOT.SSPA)CALL READQ(Q(1),NX,ISECS,IFILD)
      CALL ORTHO(QQ(1),Q(1),QQQ(J1),NUM,NCOORB,NDIM,IA)
111   IF(NPRINT.NE.5) GO TO 270
      WRITE(IW,80)
      CALL VECOUT(QQ(1),QQ(J1),NUM,NCOORB,NDIM,IW,BFLAB)

C     ----- FORM DENSITY MATRIX -----

C   SET OCCUPATION NUMBERS

270   CALL DMTX(Q(1),QQ(1),Q(I1),NA,NUM,NDIM)
      IF(NPRINT.NE.5) GO TO 280
      WRITE(IW,90)
      CALL FOUT(Q(1),NUM,IW)

C     ----- CHECK CONVERGENCE, DO EXTRAPOLATION

280   EDIFF=EHF-EHF0
      ETOT=EHF+EN
      DIFF0=DIFF
      DIFF=ZERO
      IF(DSPA)CALL FMOVE(Q(I2),QQQ(1),NX)
      IF(.NOT.DSPA)CALL READQ(QQQ(1),NX,ISECD,IFILD)
      DO 301 I=1,NX
        DDD=DABS(QQQ(I)-Q(I))
301     IF(DDD.GT.DIFF)DIFF=DDD
      CALL TIMIT(3)
      TIM1=TIM
      DELT=TIM1-TIM2
      TIM2=TIM1
      DELDIF=DIFF0-DIFF
      WRITE(IW,100) ITER,ETOT,EHF,EDIFF,DIFF,DELT,TIM1,SHIF
      write(10,100)  ITER,ETOT,EHF,EDIFF,DIFF,DELT,TIM1,SHIF

C     SAVE DENSITY MATRIX,VECTORS,EIGENVECTORS FROM CURRENT CYCLE

      CALL SAVEMO(Q(1),QQ(1),QQ(J1),NDIM,7)
      IF(VSPA)CALL FMOVE(QQ(1),QQ(I5),NCOORB*NUM)
      CONVGD=NEARLY .AND. DIFF.LE.ACURCY
      NEARLY=DIFF.LE.(ACURCY*3.0)
      IF(CONVGD) then
        WRITE(IW,110)
        GOTO 320
      endif
      CALL TIMIT(3)

C     ----- EXIT IN CASE OF TIME LIMIT

      IF((TIMLIM-TIM).GT.(DELT*1.5D0)) then
        GOTO 310
      else
        LSTOP=.TRUE.
        write(*,130)
        WRITE(IW,130)
        GO TO 320
      endif

310   IF(ITER.LT.MAXIT) then
        GO TO 220
      else
        if (nearly) then
          maxit = maxit + 20
          write(iw,'(a)')
     &    ' MAXIMUM NUMBER OF ITERATIONS INCREASED BY 20 BECAUSE APPROAC
     &HING CONVERGENCE'
          goto 220
        endif

C     TOO MANY ITERATIONS

        WRITE(IW,140)
        write(* ,140)
        LSTOP=.TRUE.
      endif

C     ----- PRINT ACTUAL VALUE OF ENERGY -----

320   WRITE(IW,170) ETOT,EHF
      write(10 ,170) ETOT,EHF
      IF(LSTOP) IREST=3
      IF(CONVGD) IREST=0
      IF(NPRINT.EQ.5.OR.NPRINT.EQ.-5) GO TO 370
      WRITE(IW,60)
      NCCC=NCOORB
      IF(NPRINT.EQ.-1) NCCC=NA+2
      DO 330 I=1,NCCC
330     WRITE(IW,70) I,QQ(J1+I-1),QQ(J1+I-1)*UAEV
      WRITE(IW,80)
      CALL VECOUT(QQ(1),QQ(J1),NUM,NCCC,NDIM,IW,BFLAB)
      IF(.NOT.LEX)GOTO 335
      CALL READQ(QQQ(1),NX,IOSF(4),IFILS)
      DO 340 I=1,NUM
        J=IA(I+1)
340     QQQ(I1+I-1)=QQQ(J)
335   IF(NPRINT.EQ.-1)GOTO 370
      WRITE(IW,90)
      CALL FOUT(Q(1),NUM,IW)
370   CONTINUE
400   CONTINUE
*      TI=TIM0
      IF(NPRINT.EQ.-5) CALL TIMIT(3)
      IF(NPRINT.NE.-5) CALL TIMIT(1)
      WRITE(IW,410) IREST
410   FORMAT(/10X,'.....END OF SCF.....,IREST=',I4)
      CALL WRT3C(TITLE,LDA(ISEX(24)),ISC24,IFILD)
      CALL WRT3(VIBSIZ,LDA(ISEX(4)),ISEC4,IFILD)
      IF(LSTOP) GOTO 420
      CALL WHTPS
      RETURN

420   CALL CLENUP
      write(*,'(/a/)') ' MICROMOL INTERRUPTED IN SCFCL'
      write(IW,'(/a/)') ' MICROMOL INTERRUPTED IN SCFCL'
      stop
      END

C     HSTAR    A1

      SUBROUTINE HSTAR(D,F,IA,NX,IFILM)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION D(*),F(*),IA(*)
      INTEGER*2 IJIN,KLIN
      real*4 xx
      COMMON/BLKIN/XX(510),IJIN(510),KLIN(510),NINT,NJNK
*      COMMON/BLKIN/XX(340),IJIN(340),KLIN(340),NINT,NJNK
      PARAMETER (M0=0,HALF=0.5D0,ZERO=0.0D0)

      DO 10 M=1,NX
10      F(M)=ZERO

C     ----- INTEGRALS ARE NOT IN SUPERMATRIX FORM (NOPK=.TRUE.) -----

C*********************************************
C          CAUTION
C    THERE ARE SEVERAL VERSIONS OF FOCK MATRIX BUILDER
C    IN FORTRAN/ASSEMBLER.   SOME USE UNMODIFIED DENSITY
C    MATRIX, SOME REQUIRE DENSITY MATRIX WITH DIAGONAL
C    ELEMENTS MULTIPILED BY 0.5.
C    FORTRAN HCON, AND IBM ASSEMBLER SGMAT USE UNMODIFIED
C    DENSITY MATRIX.
C    CRAY VERSION OF SGMAT USES MODIFIED DENSITY MATRIX
C
C**********************************************
20    CONTINUE
      CALL GET(XX,NW,IFILM)
      IF(NW.EQ.M0) GOTO 80
      IF(NINT.EQ.M0) GOTO 80
      CALL HCON(F,D,IA)
      GOTO 20

80    CONTINUE
      DO 90 M=1,NX
90      F(M)=F(M)*HALF
      RETURN
      END

C  USHIFT  M2

      SUBROUTINE USHIFT(E,NA,NCOORB,SHIF)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION E(*)

      M=NA+1
      IF(M.GT.NCOORB) RETURN
      DO 10 I=M,NCOORB
10      E(I)=E(I)-SHIF
      RETURN
      END

      SUBROUTINE HCON(A,P,IKY)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(*),P(*),IKY(*)
      INTEGER*2 IJIN,KLIN
      real*4 g
      COMMON/BLKIN/G(510),IJIN(510),KLIN(510),MWORD,NJNK
*     COMMON/BLKIN/G(340),IJIN(340),KLIN(340),MWORD,NJNK
      EQUIVALENCE (GG1,GG),(IKYJ,JL),(IKYK,JK),(IKYI,IL)
      PARAMETER (ZERO=0.0D0)
      DATA I,J,K,L/4*0/

      DO 120 IW=1,MWORD
        GG=G(IW)
        GG2=GG 
        GG3=GG
        GG4=GG
        GG5=GG
        GG6=GG
        GG7=GG
        GG8=GG+GG
        GG9=GG8
        I=IJIN(IW)/256
        K=KLIN(IW)/256
        J=IJIN(IW)-256*I
        L=KLIN(IW)-256*K
        IKYI=IKY(I)
        IJ=IKYI+J
        IK=IKYI+K
        IL=IKYI+L
        IKYK=IKY(K)
        KL=IKYK+L
        IKYJ=IKY(J)
        if(i.eq.j) then
          GG3=ZERO
          GG4=ZERO
          GG6=ZERO
          GG7=ZERO
          GG9=GG
        endif
10      if(ij.eq.kl) then
          GG5=ZERO
          GG6=ZERO
          GG7=ZERO
          GG9=ZERO
        endif
20      if(k.eq.l) then
          GG2=ZERO
          GG4=ZERO
          GG7=ZERO
          GG8=GG
        endif
30      IF(I.EQ.K)GG1=GG1+GG5
        IF(J-K)50,40,90
40        GG3=GG3+GG6
          GO TO 60
50        GG3=GG6
60        JK=IKYK+J
          IF(J-L)80,70,100
70          GG4=GG4+GG7
            GO TO 100
80          GG4=GG7
            JL=IKY(L)+J
            GO TO 110
90        JK=IKYJ+K
100     JL=IKYJ+L
110     A(IJ)=(GG8+GG8)*P(KL)+A(IJ)
        A(KL)=(GG9+GG9)*P(IJ)+A(KL)
        A(IK)=A(IK)-GG1*P(JL)
        A(JL)=A(JL)-GG4*P(IK)
        A(IL)=A(IL)-GG2*P(JK)
120     A(JK)=A(JK)-GG3*P(IL)
      RETURN
      END

C  RHR  A1

      SUBROUTINE RHR
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/BIGK/PTR(3,72),DTR(6,144),
     1           T(10,10),MINK,MAXK,LKT,MINL,MAXL,LLT,NTR,ISJNK
     2           ,SPJUNK(832)

C     ----- RIGHT MULTIPLY  T  BY  R,
C           RESULT BACK IN  T

      GO TO (50,30,10),LLT

C     ----- D SHELL -----

10    ND=6*NTR-10
      DO 20 K=MINK,MAXK
        U1=T(K,5)
        U2=T(K,6)
        U3=T(K,7)
        U4=T(K,8)
        U5=T(K,9)
        U6=T(K,10)
        NDP5 = ND+5
        NDP6 = ND+6
        NDP7 = ND+7
        NDP8 = ND+8
        NDP9 = ND+9
        NDP10 = ND+10
        T(K,5)=U1*DTR(1,NDP5)+U2*DTR(2,NDP5)+U3*DTR(3,NDP5)
     1        +U4*DTR(4,NDP5)+U5*DTR(5,NDP5)+U6*DTR(6,NDP5)
        T(K,6)=U1*DTR(1,NDP6)+U2*DTR(2,NDP6)+U3*DTR(3,NDP6)
     2        +U4*DTR(4,NDP6)+U5*DTR(5,NDP6)+U6*DTR(6,NDP6)
        T(K,7)=U1*DTR(1,NDP7)+U2*DTR(2,NDP7)+U3*DTR(3,NDP7)
     3        +U4*DTR(4,NDP7)+U5*DTR(5,NDP7)+U6*DTR(6,NDP7)
        T(K,8)=U1*DTR(1,NDP8)+U2*DTR(2,NDP8)+U3*DTR(3,NDP8)
     4        +U4*DTR(4,NDP8)+U5*DTR(5,NDP8)+U6*DTR(6,NDP8)
        T(K,9)=U1*DTR(1,NDP9)+U2*DTR(2,NDP9)+U3*DTR(3,NDP9)
     5        +U4*DTR(4,NDP9)+U5*DTR(5,NDP9)+U6*DTR(6,NDP9)
        T(K,10)=U1*DTR(1,NDP10)+U2*DTR(2,NDP10)+U3*DTR(3,NDP10)
     6         +U4*DTR(4,NDP10)+U5*DTR(5,NDP10)+U6*DTR(6,NDP10)
20      CONTINUE
      GO TO 50

C     ----- P SHELL

30    NP=3*NTR-4
      DO 40 K=MINK,MAXK  
        U1=T(K,2)
        U2=T(K,3)
        U3=T(K,4)
        NPP2 = NP+2
        NPP3 = NP+3
        NPP4 = NP+4
        T(K,2)=U1*PTR(1,NPP2)+U2*PTR(2,NPP2)+U3*PTR(3,NPP2)
        T(K,3)=U1*PTR(1,NPP3)+U2*PTR(2,NPP3)+U3*PTR(3,NPP3)
        T(K,4)=U1*PTR(1,NPP4)+U2*PTR(2,NPP4)+U3*PTR(3,NPP4)
40      CONTINUE

C     ----- LEFT MULTIPLY  T  BY R
C           RESULT BACK IN  T

50    GO TO (100,80,60),LKT

C     ----- D SHELL ----

60    ND=6*NTR-10
      DO 70 K=MINL,MAXL
        U1=T(5,K)
        U2=T(6,K)
        U3=T(7,K)
        U4=T(8,K)
        U5=T(9,K)
        U6=T(10,K)
        NDP5 = ND+5
        NDP6 = ND+6
        NDP7 = ND+7
        NDP8 = ND+8
        NDP9 = ND+9
        NDP10 = ND+10
        T(5,K)=U1*DTR(1,NDP5)+U2*DTR(2,NDP5)+U3*DTR(3,NDP5)
     &        +U4*DTR(4,NDP5)+U5*DTR(5,NDP5)+U6*DTR(6,NDP5)
        T(6,K)=U1*DTR(1,NDP6)+U2*DTR(2,NDP6)+U3*DTR(3,NDP6)
     &        +U4*DTR(4,NDP6)+U5*DTR(5,NDP6)+U6*DTR(6,NDP6)
        T(7,K)=U1*DTR(1,NDP7)+U2*DTR(2,NDP7)+U3*DTR(3,NDP7)
     &        +U4*DTR(4,NDP7)+U5*DTR(5,NDP7)+U6*DTR(6,NDP7)
        T(8,K)=U1*DTR(1,NDP8)+U2*DTR(2,NDP8)+U3*DTR(3,NDP8)
     &        +U4*DTR(4,NDP8)+U5*DTR(5,NDP8)+U6*DTR(6,NDP8)
        T(9,K)=U1*DTR(1,NDP9)+U2*DTR(2,NDP9)+U3*DTR(3,NDP9)
     &        +U4*DTR(4,NDP9)+U5*DTR(5,NDP9)+U6*DTR(6,NDP9)
        T(10,K)=U1*DTR(1,NDP10)+U2*DTR(2,NDP10)+U3*DTR(3,NDP10)
     &         +U4*DTR(4,NDP10)+U5*DTR(5,NDP10)+U6*DTR(6,NDP10)
70      CONTINUE
      GO TO 100

C     ----- P SHELL

80    NP=3*NTR-4
      DO 90 K=MINL,MAXL
        U1=T(2,K)
        U2=T(3,K)
        U3=T(4,K)
        NPP2 = NP+2
        NPP3 = NP+3
        NPP4 = NP+4
        T(2,K)=U1*PTR(1,NPP2)+U2*PTR(2,NPP2)+U3*PTR(3,NPP2)
        T(3,K)=U1*PTR(1,NPP3)+U2*PTR(2,NPP3)+U3*PTR(3,NPP3)
        T(4,K)=U1*PTR(1,NPP4)+U2*PTR(2,NPP4)+U3*PTR(3,NPP4)
90      CONTINUE
100   RETURN
      END

